---
title: Git操作
categories: 工具
tags:
  - Git
abbrlink: 53101
date: 2016-10-07 23:07:24
---

记录平时对git的使用方法和技巧

<!--- more --->
## 1. 创建本地git库
```
mkdir test.git
```
进入test.git
```
git init --bare --shared
```

> Window下进行跨平台的clone操作，下载链接前需要添加`ssh`
> ```
> git remote add origin ssh://hostname@192.168.1.1:/test.git
> ```
> Linux:
> ```
> git remote add origin hostname@192.168.1.1:/test.git
> ```

## 2. 创建分支
```
git branch branch_name
```
删除本地分支：
```
git branch -d branch_name
```

## 3. 切换分支
```
git checkout  branch_name
```

## 4. 下载
```
git clone  URL
```
下载较大工程：
```
git clone --depth=1 URL
```
> depth用于指定克隆深度，为1即表示只克隆最近一次commit.

## 5. 日志
```
git commit
```

## 6. 提交
```
git push 远程库名  分支名
```

## 7. 更新
```
git pull 远程库名  分支名
```

## 8.添加代码
```
git add <filename>
git add -A    #添加所有修改
```

## 9.查看日志
```
git log
git log -n     #查看前n条日志
git log --stat  #查看日志的修改情况
git log -p       #查看日志的具体修改
git log <filename/dirname>  #查看该文件或目录的修改日志
```

### tig

> 命令行下查看git历史提交记录的工具

## 10.回退
```
git reset HEAD <filename> #将该文件从缓冲区撤回
```
## 11.查看远程库
```
git remote -v
```
添加远程库：
```
git remote add <name> <url>
```

## 12.获取远程库中的最新版本，但与git pull 不同它不会merge
```
git  fetch  远程库名  分支名
```
作用：可以对比远程库与当前本地的差异。

## 13.查看标签
```
git tag
```
作用：一个稳定的版本或者完成一个功能，为了发布或者保存而打的标签，主要是发布

## 14.切换标签
```
git checkout <Tag>
```

## 15.暂存当前改动

```
git stash
```
>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动。使用git stash save 'message...'可以添加一些注释

```
git stash list
```
>显示保存进度的列表。也就意味着，git stash命令可以多次执行。

```
git stash pop [–index] [stash_id]
```
>git stash pop 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。

```
git stash apply [–index] [stash_id]
```
>除了不删除恢复的进度之外，其余和git stash pop 命令一样。

```
git stash drop [stash_id]
```
> 删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。

```
git stash clear
```
>删除所有存储的进度。

## 16.恢复本地错误操作

```
git reflog
```
> 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）

```
$git reflog -h
usage: git reflog [ show | expire | delete ]
```
> - `show`: 显示所有条目,缺省值
> - `expire`: 删除掉更老的reflog条目
> - `delete`: 从reflog中删除一个条目

## 17.模块管理

1. 添加模块
```
git submodule add projectB.git projectB
```

2. 使用子模块
```
git submodule init
git submodule update
```
> 克隆项目后，默认子模块目录下无任何内容。需要在项目根目录执行此命令完成子模块的下载
>
> **在clone整个项目时添加递归参数:`--recurse-submodules`**

3. 删除子模块

    1. `rm -rf 子模块目录` 删除子模块目录及源码
    2. `vi .gitmodules` 删除项目目录下.gitmodules文件中子模块相关条目
    3. `vi .git/config` 删除配置项中子模块相关条目
    4. `rm .git/module/*` 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可

执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：
```
git rm --cached 子模块名称
```

## 18.commit统计

可以大致了解一下每个人对这个项目提交的commit数量和大致的贡献度

``` shell
git summary
```

## .git无法忽略target,或者不生效的情况

`.gitignore`未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交

```
git rm -r --cached .
git add .
git commit -m 'update .gitignore'
```

## 强制更新代码

```
git push origin master --force
```
- 错误：
```
remote: error: denying non-fast-forward refs/heads/master (you should pull first)
```
> 该消息表示您不允许进行非快进推送, 远程存储库很可能在其配置中`denyNonFastforwards = true`, 要更改设置，请执行`git config receive.denynonfastforwards false`


## DoTo

1. [Git 最佳实践：分支管理](http://blog.jobbole.com/109466/)
